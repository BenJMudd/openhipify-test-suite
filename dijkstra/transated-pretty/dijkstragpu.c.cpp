///////////////// Generated by Openhipify /////////////////
#include "hip/hip_runtime.h"

#include "dijkstragpu_kernel.cl.hpp"
///////////////////////////////////////////////////////////

#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAX_SOURCE_SIZE (0x100000)
int main() {
  srand(time(NULL));
  int n = 452;
  float *matrix = (float *)malloc(sizeof(float) * n * n);
  float *visited = (float *)malloc(sizeof(float) * n);
  float *minimum = (float *)malloc(sizeof(float) * n);
  int *index = (int *)malloc(sizeof(int) * n);
  int *path = (int *)malloc(sizeof(int) * n);
  float *array = (float *)malloc(sizeof(float) * n);
  int i, j, k, p, temp;
  int count = 0;
  FILE *fk = fopen("node452.txt", "r");
  if (fk == NULL) {
    printf("Error opening file!\n");
    return 0;
  }
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      fscanf(fk, "%f", &matrix[i * n + j]);
    }
  }
  for (i = 0; i < n; i++) {
    visited[i] = 0;
    minimum[i] = 999999;
    index[i] = -1;
  }
  visited[0] = 1;

  for (i = 0; i < n; i++)
    array[i] = matrix[0 * n + i];

  hipError_t err = hipSuccess;

  void *Matrix, *Visited, *Min, *Index, *Array, *Path;
  err = hipMalloc((void **)&Matrix, sizeof(float) * n * n);
  err = hipMalloc((void **)&Visited, sizeof(float) * n);
  err = hipMalloc((void **)&Min, sizeof(float) * n);
  err = hipMalloc((void **)&Index, sizeof(int) * n);
  err = hipMalloc((void **)&Array, sizeof(float) * n);
  err = hipMalloc((void **)&Path, sizeof(int) * n);
  hipMemcpy(Matrix, matrix, sizeof(float) * n * n, hipMemcpyHostToDevice);
  hipMemcpy(Visited, visited, sizeof(float) * n, hipMemcpyHostToDevice);
  hipMemcpy(Min, minimum, sizeof(float) * n, hipMemcpyHostToDevice);
  hipMemcpy(Index, index, sizeof(int) * n, hipMemcpyHostToDevice);
  hipMemcpy(Array, array, sizeof(float) * n, hipMemcpyHostToDevice);
  hipMemcpy(Path, path, sizeof(int) * n, hipMemcpyHostToDevice);
  size_t globalsize[1];
  globalsize[0] = 452;
  size_t localsize[1];
  localsize[0] = 113;

  clock_t tic = clock();

  hipLaunchKernelGGL(dijkstragpu, dim3(*(globalsize)), dim3(*(localsize)), 0, 0,
                     (float *)Matrix, (float *)Visited, (float *)Min,
                     (int *)Index, (float *)Array, (int *)Path, (NULL), (NULL));
  clock_t toc = clock();
  hipMemcpy(matrix, Matrix, sizeof(float) * n * n, hipMemcpyDeviceToHost);
  FILE *fq = fopen("gpuanswer452.txt", "w");
  if (fq == NULL) {
    printf("Error opening file!\n");
    return 0;
  }
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      fprintf(fq, "%f\n", matrix[i * n + j]);
    }
  }
  double total_time;
  free(matrix);
  free(visited);
  free(minimum);
  free(index);
  free(array);
  hipFree(Matrix);
  hipFree(Visited);
  hipFree(Min);
  hipFree(Index);
  hipFree(Array);

  return 0;
}
