///////////////// Generated by Openhipify /////////////////
#include "hip/hip_runtime.h"

#include "matrixmul_kernel.cl.hpp"
///////////////////////////////////////////////////////////

/* kernel.cl
 * Matrix multiplication: C = A * B.
 * Device code.
 */

// OpenCL Kernel
__global__ void matrixMul(float *C, float *A, float *B, int wA, int wB) {

  int tx = hipBlockDim_x * hipBlockIdx_x + hipThreadIdx_x;
  int ty = hipBlockDim_y * hipBlockIdx_y + hipThreadIdx_y;
  // value stores the element that is
  // computed by the thread
  float value = 0;
  for (int k = 0; k < wA; ++k) {
    float elementA = A[ty * wA + k];
    float elementB = B[k * wB + tx];
    value += elementA * elementB;
  }

  // Write the matrix to device memory each
  // thread writes one element
  C[ty * wA + tx] = value;
}
